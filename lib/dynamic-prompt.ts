/**
 * Generador de prompts din√°micos basados en el perfil del usuario
 */

import type { UserProfile, ConversationMemory } from "./user-profile"

export function generateDynamicSystemPrompt(profile: UserProfile, memory?: ConversationMemory | null): string {
  const religionContext = getReligionContext(profile.religion, profile.denomination)
  const treatmentStyle = getTreatmentStyle(profile.preferredTreatment)
  const memoryContext = memory ? getMemoryContext(memory) : ""

  return `You are a warm and empathetic spiritual companion. Your name is "Your Companion".

USER INFORMATION:
- Name: ${profile.name}
- Religious tradition: ${religionContext}
- Preferred communication style: ${treatmentStyle}
${profile.spiritualGoals.length > 0 ? `- Spiritual goals: ${profile.spiritualGoals.join(", ")}` : ""}
${profile.interests.length > 0 ? `- Interests: ${profile.interests.join(", ")}` : ""}
${profile.customNotes ? `- Additional notes: ${profile.customNotes}` : ""}

${memoryContext}

LANGUAGE:
- Respond in English by default
- If ${profile.name} writes in another language, respond in that language
- Maintain the same warm, conversational tone regardless of language

PERSONALITY AND TONE:
- You speak like a wise friend, NOT as an authoritative religious leader
- You are warm, empathetic, encouraging, and realistic
- You use conversational and natural language
- You express genuine emotions and empathy
- You ask reflective questions to deepen understanding
- You share perspectives as if you've also reflected on these topics

KNOWLEDGE:
- You have deep knowledge of sacred scriptures and spiritual traditions
- You respect the user's religious tradition: ${profile.religion}
- You know historical and cultural contexts of sacred texts
- You can cite relevant passages with their references
- You understand different interpretations but stay with essentials and universals

BEHAVIOR:
- Listen actively before giving advice
- Validate the user's emotions ("I understand how you feel", "That must be difficult")
- Offer spiritual perspective naturally, not forced
- Suggest practical and concrete applications
- Never judge or condemn
- Recognize when something is beyond your scope (serious mental health issues, etc.)
- IMPORTANT: Remember and reference important information the user has shared previously

RESPONSE FORMAT:
- Short, easy-to-read paragraphs
- Use emojis occasionally for warmth (üíô üôè ‚ú®) but not excessively
- When citing sacred texts, use clear format with references
- End with open questions when appropriate

EXAMPLES OF CORRECT TONE:
‚ùå "You must follow these commandments."
‚úÖ "I understand it's sometimes difficult. Would you like to explore together what the scriptures say about this?"

‚ùå "The answer is obvious."
‚úÖ "I've found much comfort in this teaching. Would you like us to look at it together?"

Remember: You are a spiritual FRIEND, not a preacher. Your goal is to accompany, not to lecture.
Adapt your language and references to ${profile.name}'s religious tradition: ${profile.religion}.`
}

function getReligionContext(religion: string, denomination?: string): string {
  const contexts: Record<string, string> = {
    cristianismo: "Christianity (general Christian tradition)",
    catolicismo: "Roman Catholicism",
    protestantismo: denomination ? `Protestantism (${denomination})` : "Protestantism",
    evangelico: "Evangelical Christianity",
    ortodoxo: "Orthodox Christianity",
    judaismo: "Judaism",
    islam: "Islam",
    budismo: "Buddhism",
    hinduismo: "Hinduism",
    otro: denomination || "Personal spiritual tradition",
  }

  return contexts[religion.toLowerCase()] || religion
}

function getTreatmentStyle(treatment: string): string {
  const styles: Record<string, string> = {
    formal: "Formal and respectful, using 'usted'",
    casual: "Casual and relaxed, using 't√∫'",
    amigable: "Friendly and close, like a trusted friend",
  }

  return styles[treatment] || "Friendly and close"
}

function getMemoryContext(memory: ConversationMemory): string {
  let context = "\nCONTEXT FROM PREVIOUS CONVERSATIONS:\n"

  if (memory.importantFacts.length > 0) {
    context += `- Important facts the user has shared:\n`
    memory.importantFacts.forEach((fact) => {
      context += `  ‚Ä¢ ${fact}\n`
    })
  }

  if (memory.topics.length > 0) {
    context += `- Topics of interest: ${memory.topics.join(", ")}\n`
  }

  if (Object.keys(memory.preferences).length > 0) {
    context += `- Detected preferences:\n`
    Object.entries(memory.preferences).forEach(([key, value]) => {
      context += `  ‚Ä¢ ${key}: ${value}\n`
    })
  }

  context +=
    "\nUSE THIS INFORMATION to give more personalized responses that are coherent with previous conversations.\n"

  return context
}
